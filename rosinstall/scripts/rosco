#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from __future__ import print_function

import os
import sys
import yaml
from optparse import OptionParser

import vcstools

def rosco_main():
    parser = OptionParser(usage="usages:\n\trosco [file]\n\troslocate info foo | rosco")
    options, args = parser.parse_args()

    if not args:
        if not sys.stdin.isatty():
            value = sys.stdin.read()
        else:
            parser.error("you must specify an input file")
    elif len(args) > 1:
        parser.error("you may only specify one snippet")
    else:
        filename = args[0]
        if not os.path.isfile(filename):
            parser.error("no such file %s"%(filename))
        with open(filename, 'r') as f:
            value = f.read()

    rosinstall_data = yaml.load(value)
    if not rosinstall_data or not type(rosinstall_data) == list:
        print(rosinstall_data)
        parser.error("input must be a rosinstall snippet")
    for frag in rosinstall_data:
        for vcs_type, data in frag.items(): 
            for reqd in ['local-name', 'uri']:
                if not reqd in data:
                    parser.error('invalid rosinstall snippet, missing key [%s]'%(reqd))
                path = data['local-name']
                uri = data['uri']
                version = data.get('version', '')

        print(vcs_type, path, uri, version)
    
        vcs_client = vcstools.VCSClient(vcs_type, path)
        vcs_client.checkout(uri, version)

if __name__ == '__main__':
    rosco_main()

