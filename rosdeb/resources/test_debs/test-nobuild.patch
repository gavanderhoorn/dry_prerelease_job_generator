Index: core/rosbuild/private.cmake
===================================================================
--- core/rosbuild/private.cmake	(revision 11073)
+++ core/rosbuild/private.cmake	(working copy)
@@ -149,11 +149,19 @@
 
   # Create target for this test
   # We use rostest to call the executable to get process control, #1629
-  add_custom_target(test_${_testname}
-                    COMMAND rostest --bare --bare-name=${_testname} --bare-limit=${_gtest_TIMEOUT} ${EXECUTABLE_OUTPUT_PATH}/${exe}
-                    DEPENDS ${EXECUTABLE_OUTPUT_PATH}/${exe}
-                    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-                    VERBATIM)
+  # But don't depend on the gtest executable if rosbuild_test_nobuild is set, #3008
+  if(NOT rosbuild_test_nobuild)
+    add_custom_target(test_${_testname}
+                      COMMAND rostest --bare --bare-name=${_testname} --bare-limit=${_gtest_TIMEOUT} ${EXECUTABLE_OUTPUT_PATH}/${exe}
+                      DEPENDS ${EXECUTABLE_OUTPUT_PATH}/${exe}
+                      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+                      VERBATIM)
+  else(NOT rosbuild_test_nobuild)
+    add_custom_target(test_${_testname}
+                      COMMAND rostest --bare --bare-name=${_testname} --bare-limit=${_gtest_TIMEOUT} ${EXECUTABLE_OUTPUT_PATH}/${exe}
+                      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+                      VERBATIM)
+  endif(NOT rosbuild_test_nobuild)
   # Don't register to check xml output here, because we may have gotten
   # here through registration of a future test.  Eventually, we should pass
   # in the overriding target (e.g., test-results vs. test-future-results).
@@ -165,7 +173,10 @@
   add_dependencies(${exe} rospack_gensrv)
 
   # Make sure all test programs are built before running this test
-  add_dependencies(test_${_testname} tests)
+  # but not if rosbuild_test_nobuild is set, #3008
+  if(NOT rosbuild_test_nobuild)
+    add_dependencies(test_${_testname} tests)
+  endif(NOT rosbuild_test_nobuild)
 
 endmacro(_rosbuild_add_gtest)
 
@@ -204,7 +215,10 @@
                     VERBATIM)
 
   # Make sure all test programs are built before running this test
-  add_dependencies(rostest_${_testname} tests)
+  # but not if rosbuild_test_nobuild is set, #3008
+  if(NOT rosbuild_test_nobuild)
+    add_dependencies(rostest_${_testname} tests)
+  endif(NOT rosbuild_test_nobuild)
 
   # rostest-check-results will do the magic of fixing an incorrect file extension
   # Don't register to check rostest output here, because we may have gotten
@@ -250,7 +264,10 @@
                     VERBATIM)
 
   # Make sure all test programs are built before running this test
-  add_dependencies(pyunit_${_testname} tests)
+  # but not if rosbuild_test_nobuild is set, #3008
+  if(NOT rosbuild_test_nobuild)
+    add_dependencies(pyunit_${_testname} tests)
+  endif(NOT rosbuild_test_nobuild)
 
 endmacro(_rosbuild_add_pyunit)
 
@@ -278,7 +295,10 @@
                     VERBATIM)
   
   # Make sure all test programs are built before running this test
-  add_dependencies(roslaunch_check_${_testname} tests)
+  # but not if rosbuild_test_nobuild is set, #3008
+  if(NOT rosbuild_test_nobuild)
+    add_dependencies(roslaunch_check_${_testname} tests)
+  endif(NOT rosbuild_test_nobuild)
   
 endmacro(_rosbuild_add_roslaunch_check)
 
Index: core/rosbuild/public.cmake
===================================================================
--- core/rosbuild/public.cmake	(revision 11073)
+++ core/rosbuild/public.cmake	(working copy)
@@ -287,7 +287,11 @@
   # We need to build tests before running them.  Addition of this
   # dependency also ensures that old test results get cleaned prior to a
   # new test run.
-  add_dependencies(test tests)
+  # but not if rosbuild_test_nobuild is set, #3008
+  if(NOT rosbuild_test_nobuild)
+    add_dependencies(test tests)
+  endif(NOT rosbuild_test_nobuild)
+  
   # Clean out previous test results before running tests.  Use bash
   # conditional to ignore failures (most often happens when a stale NFS
   # handle lingers in the test results directory), because CMake doesn't
Index: core/mk/cmake.mk
===================================================================
--- core/mk/cmake.mk	(revision 11073)
+++ core/mk/cmake.mk	(working copy)
@@ -28,6 +28,10 @@
 # All other targets are just passed through
 test: all
 	if cd build && make -k $@; then make test-results; else make test-results && exit 1; fi
+test-nobuild:
+	@mkdir -p build
+	cd build && cmake $(CMAKE_FLAGS) -Drosbuild_test_nobuild=1 ..
+	if cd build && make clean-test-results && make -k test; then make test-results; else make test-results && exit 1; fi
 tests: all
 	cd build && make $@
 test-future: all
